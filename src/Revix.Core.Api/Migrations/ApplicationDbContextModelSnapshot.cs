// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Revix.Core.Infrastructure.Persistence;

#nullable disable

namespace Revix.Core.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Revix.Core.Domain.Entities.Cryptocurrency", b =>
                {
                    b.Property<Guid>("CryptocurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CirculatingSupply")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CmcRank")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MaxSupply")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("NumMarketPairs")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("SelfReportedCirculatingSupply")
                        .HasColumnType("text");

                    b.Property<string>("SelfReportedMarketCap")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalSupply")
                        .HasColumnType("numeric");

                    b.HasKey("CryptocurrencyId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("QuoteId");

                    b.ToTable("Cryptocurrencies");
                });

            modelBuilder.Entity("Revix.Core.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("FullyDilutedMarketCap")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MarketCap")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MarketCapDominance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PercentChange1h")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PercentChange24h")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PercentChange7d")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Volume24h")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VolumeChange24h")
                        .HasColumnType("numeric");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Revix.Core.Domain.Entities.Platform", b =>
                {
                    b.Property<Guid>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Revix.Core.Domain.Entities.Quote", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BTCCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("USDCurrencyId")
                        .HasColumnType("uuid");

                    b.HasKey("QuoteId");

                    b.HasIndex("BTCCurrencyId");

                    b.HasIndex("USDCurrencyId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Revix.Core.Domain.Entities.Cryptocurrency", b =>
                {
                    b.HasOne("Revix.Core.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("Revix.Core.Domain.Entities.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.Navigation("Platform");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Revix.Core.Domain.Entities.Quote", b =>
                {
                    b.HasOne("Revix.Core.Domain.Entities.Currency", "BTC")
                        .WithMany()
                        .HasForeignKey("BTCCurrencyId");

                    b.HasOne("Revix.Core.Domain.Entities.Currency", "USD")
                        .WithMany()
                        .HasForeignKey("USDCurrencyId");

                    b.Navigation("BTC");

                    b.Navigation("USD");
                });
#pragma warning restore 612, 618
        }
    }
}
